#include<stdio.h>
#include<math.h>

int board[20], count;

int place(int row, int column) {
    int i;
    // Check if the queen can be placed in the current column and row without attacking another queen
    for(i = 1; i <= row - 1; i++) {
        // Check if the queen is already placed in the same column (i.e., column conflict)
        if(board[i] == column) return 0;
        // Check if the queen is placed on the same diagonal (i.e., diagonal conflict)
        if(abs(board[i] - column) == abs(i - row)) return 0;
    }
    return 1;  // No conflicts found, it's safe to place the queen
}

void print(int n) {
    int i, j;
    // Print the current solution (configuration of queens on the board)
    printf("\n\nSolution %d:\n\n", ++count);
    for(i = 1; i <= n; i++) {
        printf("\t%d", i);  // Print column numbers
    }
    for(i = 1; i <= n; i++) {
        printf("\n\n%d", i);  // Print row numbers
        for(j = 1; j <= n; j++) {
            if(board[i] == j) {
                printf("\tQ");  // Queen is placed at (i, j)
            } else {
                printf("\t-");  // Empty spot on the board
            }
        }
    }
}

void queen(int row, int n) {
    int column;
    // Try placing queens row by row
    for(column = 1; column <= n; column++) {
        if(place(row, column)) {  // Check if placing the queen in (row, column) is safe
            board[row] = column;  // Place the queen in the current row and column
            if(row == n) {
                print(n);  // If all queens are placed, print the solution
            } else {
                queen(row + 1, n);  // Move to the next row and continue placing queens
            }
        }
    }
}

int main() {
    int n;
    printf("-n Queen problem using backtracking -");
    printf("\n\nEnter number of queens: ");
    scanf("%d", &n);  // Get the number of queens (also the size of the board)
    queen(1, n);  // Start placing queens from row 1
    return 0;
}
